#Задание 1
#Напишите функцию tpl_sort(), которая сортирует кортеж, состоящий из целых чисел по возрастанию и возвращает его.
# Если хотя бы один элемент не является целым числом, то функция возвращает исходный кортеж.
def tpl_sort(incoming_list):
  my_list = list(incoming_list)
  return tuple(sorted(my_list))
print(tpl_sort((1, 2, 3, 10, 5, -1)))

#Задание 2
#Функция slicer() на вход принимает кортеж и случайный элемент. Требуется вернуть новый кортеж, начинающийся с первого
# появления элемента в нем и заканчивающийся вторым его появлением включительно. Если элемента нет вовсе – вернуть пустой кортеж.
# Если элемент встречается только один раз, то вернуть кортеж, который начинается с него и идет до конца исходного.
index_beg = 0
index_end = -1
def slicer(any_tuple, element):
  first = second = index_beg

  if element in any_tuple:
    first = any_tuple.index(element)
  if any_tuple.count(element) > 1:
    second = any_tuple.index(element, first + 1) + 1
  else:
    second = index_end

  return any_tuple[first:second]
#Задание 3
#На вход функции sieve() поступает список целых чисел. В результате выполнения этой функции будет получен кортеж уникальных
# элементов списка в обратном порядке.
def sieve(lst):
  unique = []
  [unique.append(item) for item in reversed(lst) if item not in unique]
  return tuple(unique)

#Задание 4
#Николай знает, что кортежи являются неизменяемыми, но он с этим не готов соглашаться. Ученик решил создать функцию del_from_tuple(),
# которая будет удалять первое появление определенного элемента из кортежа по значению и возвращать кортеж без оного.
# Попробуйте повторить шедевр не признающего авторитеты начинающего программиста. К слову, Николай не всегда уверен в наличии
# элемента в кортеже (в этом случае кортеж вернется функцией в исходном виде).
  def del_from_tuple(tpl, elem):
    lst = list(tpl)
    if elem in tpl:
      lst.remove(elem)
    return tuple(lst)